%%{
	machine eggshell;

	integer     = ('+'|'-')?[0-9]+;
	float       = ('+'|'-')?[0-9]+'.'[0-9]+;
	identifier  = [a-zA-Z$_][a-zA-Z_]*;
	logical_op  = ('?'|'==='|'>='|'<='|'<<'|'>>'|'=='|'||'|'&&'|'='|'+'|'-'|'*'|'/'|'^'|'<'|'>');
	index_group = ('['|']');
	brace_group = ('{'|'}');
	paren_group = ('('|')');
	str_delim   = ["'];
	modifier    = ('::'|[:@]);
	separator   = [,;.];
	escape      = '\\'[tnr\(\{\}\)\[\]'"];
	wspace      = [ \t\r\n];
	the_rest    = [^\n];

	main := |*
		integer => { 
			@parser.emit(:number_literal, data, ts, te) 
		};

		float => { 
			@parser.emit(:number_literal, data, ts, te) 
		};

		identifier => { 
			@parser.emit(:identifier, data, ts, te) 
		};
		
		logical_op => {
			@parser.emit(:logical_op, data, ts, te)
		};

		index_group => {
			@parser.emit(:index_group, data, ts, te);
		};
		
		brace_group => {
			@parser.emit(:brace_group, data, ts, te);
		};

		paren_group => {
			@parser.emit(:paren_group, data, ts, te);
		};
		
		str_delim => {
			@parser.emit(:str_delim, data, ts, te);
		};
		
		modifier => {
			@parser.emit(:modifier, data, ts, te);
		};

		separator => {
			@parser.emit(:separator, data, ts, te);
		};

		escape => {
			@parser.emit(:escape, data, ts, te);
		};

		wspace => {
			@parser.emit(:space, data, ts, te)
		};

		the_rest => {
			@parser.emit(:string, data, ts, te)
		};
	*|;
}%%
# %

module Eggshell; class ExpressionEvaluator
class Eggshell::ExpressionEvaluator::Lexer

	def initialize(parser)
		@parser = parser
		%% write data;
		# %
	end
	
	def process(source)
		data = source.is_a?(String) ? source.unpack("c*") : source
		eof = data.length
		%% write init;
		%% write exec;
		# %
	end
end
end; end